import { getSuperProperty } from './workarounds.js';
import * as symbols from './symbols.js';


const absorbDecelerationSymbol = Symbol('absorbDeceleration');
const lastDeltaXSymbol = Symbol('lastDeltaX');
const lastWheelTimeoutSymbol = Symbol('lastWheelTimeout');
const postNavigateDelayCompleteSymbol = Symbol('postNavigateDelayComplete');
const wheelDistanceSymbol = Symbol('wheelDistance');


/**
 * Map trackpad events to swipe gestures.
 * 
 * @module TrackpadSwipeMixin
 */
export default function TrackpadSwipeMixin(Base) {

  // The class prototype added by the mixin.
  return class TrackpadSwipe extends Base {

    constructor() {
      // @ts-ignore
      super();
      this.addEventListener('wheel', async (event) => {
        this[symbols.raiseChangeEvents] = true;
        const handled = handleWheel(this, event);
        if (handled) {
          event.preventDefault();
        }
        await Promise.resolve();
        this[symbols.raiseChangeEvents] = false;
      });
      resetWheelTracking(this);
    }

    get defaultState() {
      return Object.assign(super.defaultState, {
        swipeAxis: 'horizontal',
        swipeFraction: null
      });
    }

    /**
     * See [symbols.swipeTarget](symbols#swipeTarget).
     * 
     * @property symbols.swipeTarget
     * @memberof TrackpadSwipeMixin
     * @type {HTMLElement}
     */
    get [symbols.swipeTarget]() {
      // Next line is same as: const base = super[symbols.swipeTarget]
      const base = getSuperProperty(this, TrackpadSwipe, symbols.swipeTarget);
      return base || this;
    }
  }
}


// Time we wait following a navigation before paying attention to wheel
// events again.
const POST_NAVIGATE_TIME = 250;

// Time we wait after the last wheel event before we reset things.
const WHEEL_TIME = 100;


/*
* A wheel event has been generated. This could be a real wheel event, or it
* could be fake (see notes in the header).
*
* This handler uses several strategies to try to approximate native trackpad
* swipe navigation.
*
* If the user has dragged enough to cause a navigation, then for a short
* delay following that navigation, subsequent wheel events will be ignored.
*
* Furthermore, follwowing a navigation, we ignore all wheel events until we
* receive at least one event where the event's deltaX (distance traveled) is
* *greater* than the previous event's deltaX. This helps us filter out the
* fake wheel events generated by the browser to simulate deceleration.
*
*/
function handleWheel(element, event) {

  if (element.state.swipeAxis === 'vertical') {
    // This mixin currently only supports horizontal swiping.
    return;
  }

  // Since we have a new wheel event, reset our timer waiting for the last
  // wheel event to pass.
  if (element[lastWheelTimeoutSymbol]) {
    clearTimeout(element[lastWheelTimeoutSymbol]);
  }
  element[lastWheelTimeoutSymbol] = setTimeout(async () => {
    element[symbols.raiseChangeEvents] = true;
    wheelTimedOut(element);
    await Promise.resolve();
    element[symbols.raiseChangeEvents] = false;
  }, WHEEL_TIME);

  const deltaX = event.deltaX;
  const deltaY = event.deltaY;

  // See if component event represents acceleration or deceleration.
  const acceleration = Math.sign(deltaX) * (deltaX - element[lastDeltaXSymbol]);
  element[lastDeltaXSymbol] = deltaX;

  if (Math.abs(deltaX) < Math.abs(deltaY)) {
    // Move was mostly vertical. The user may be trying scroll with the
    // trackpad/wheel. To be on the safe, we ignore such events.
    return false;
  }

  if (element[postNavigateDelayCompleteSymbol]) {
    // It's too soon after a navigation; ignore the event.
    return true;
  }

  if (acceleration > 0) {
    // The events are not (or are no longer) decelerating, so we can start
    // paying attention to them again.
    element[absorbDecelerationSymbol] = false;
  } else if (element[absorbDecelerationSymbol]) {
    // The wheel event was likely faked to simulate deceleration; ignore it.
    return true;
  }

  element[wheelDistanceSymbol] -= deltaX;

  // Update the travel fraction of the component being navigated.
  const width = element[symbols.swipeTarget].offsetWidth;
  let swipeFraction = width > 0 ?
    element[wheelDistanceSymbol] / width :
    0;
  swipeFraction = Math.sign(swipeFraction) * Math.min(Math.abs(swipeFraction), 1);

  // If the user has dragged enough to reach the previous/next item, then
  // complete a navigation to that item.
  let gesture;
  if (swipeFraction === -1) {
    gesture = symbols.swipeLeft;
  } else if (swipeFraction === 1) {
    gesture = symbols.swipeRight;
  }
  if (gesture) {
    if (element[gesture]) {
      element[gesture]();
    }
    postNavigate(element);
  } else {
    element.setState({ swipeFraction });
  }

  return true;
}

// Following a navigation, partially reset our wheel tracking.
function postNavigate(element) {
  element[wheelDistanceSymbol] = 0;
  element[postNavigateDelayCompleteSymbol] = true;
  element[absorbDecelerationSymbol] = true;
  setTimeout(() => {
    element[postNavigateDelayCompleteSymbol] = false;
  }, POST_NAVIGATE_TIME);
  element.setState({ swipeFraction: null });
}

// Reset all state related to the tracking of the wheel.
function resetWheelTracking(element) {
  element[wheelDistanceSymbol] = 0;
  element[lastDeltaXSymbol] = 0;
  element[absorbDecelerationSymbol] = false;
  element[postNavigateDelayCompleteSymbol] = false;
  if (element[lastWheelTimeoutSymbol]) {
    clearTimeout(element[lastWheelTimeoutSymbol]);
    element[lastWheelTimeoutSymbol] = null;
  }
}

// A sufficiently long period of time has passed since the last wheel event.
// We snap the selection to the closest item, then reset our state.
async function wheelTimedOut(element) {

  // Snap to the closest item.
  const swipeFraction = element.state.swipeFraction;
  let gesture;
  if (swipeFraction <= -0.5) {
    gesture = symbols.swipeLeft;
  } else if (swipeFraction >= 0.5) {
    gesture = symbols.swipeRight;
  }

  // TODO: Listen for the transition to complete, and then restore
  // dragging to false (or the previous value).
  resetWheelTracking(element);
  element.setState({ swipeFraction: null });

  if (gesture && element[gesture]) {
    await element[gesture]();
  }
}
